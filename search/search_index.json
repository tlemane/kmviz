{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to kmviz documentation!","text":"<p> kmviz is a work in progress </p> <p>kmviz is a user-friendly web interface for interacting with biological sequence indexes. In a nutshell, it connects to multiple, local or distant, sequence indexes to performs sequence queries. Results can then be explored through <code>tables</code>, <code>plots</code>, <code>sequence views</code>, or even <code>maps</code> when metadata contains geographical information. Note that representations are fully customizable allowing to make production-grade figures.</p> <p>Before installing and playing with kmviz, let's quickly introduce the kmviz vocabulary.</p> <ul> <li><code>Query</code> refers to a pair <code>id</code>:<code>sequence</code>.</li> <li><code>Provider</code> refers to an index engine, e.g. one capable of querying a kmindex db.</li> <li><code>MetaDB</code> refers to a db engine, e.g. one capable of load and query <code>.tsv</code> files.</li> <li><code>Database</code> refers to a pair of configured <code>Provider</code>/<code>MetaDB</code>.</li> </ul> <p>In short, you select one or more <code>Databases</code>, you provide one or more <code>Queries</code>. For each <code>Database</code> and <code>Query</code>, the <code>Provider</code> responds with a list of identifiers matching your <code>Query</code>, and the <code>MetaDB</code> returns the metadata associated with these identifiers to finally serves them into the interface.</p> <p>Contact</p> <p>Teo Lemane: teo[dot]lemane[at]genoscope[dot]cns[dot]fr</p>"},{"location":"advanced/","title":"Introduction","text":"<p>The Advanced section covers running kmviz instances, implementing plugins, and deployment, and is mainly intended for users interested in hosting instances.</p> <ul> <li>Quickstart</li> <li>Configuration</li> <li>Deploy</li> <li>Plugins</li> </ul>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#using-pip","title":"Using pip","text":"<pre><code>pip install kmviz\n</code></pre>"},{"location":"installation/#from-sources","title":"From sources","text":"<pre><code>pip install git+https://github.com/tlemane/kmviz.git\n</code></pre>"},{"location":"installation/#docker","title":"Docker","text":"<pre><code>docker pull tlemane/kmviz\n</code></pre>"},{"location":"introduction/","title":"Introduction","text":"<p>kmviz is a web interface that allows querying sequence indexes and exploring the metadata associated with the results. An instance can query multiple <code>Databases</code> (a <code>Provider</code> and <code>MetaDB</code> pair). This part of the documentation focuses on using the interface and the REST API. The Advanced section covers running kmviz instances, implementing plugins, and deployment, and is intended for users interested in hosting instances. However, running an instance locally on a personal machine can be useful in several cases:</p> <ol> <li>One can host a <code>Provider</code> and a <code>MetaDB</code> but not kmviz. In this case, you can run the instance locally, which will connect to these services. See X.</li> <li>To visualize previous results. Results can be reloaded later, using a <code>session-id</code> (see Session ID) on a remote instance for a duration that depends on the configuration. However, the session can also be downloaded and reviewed in a local instance, which is advisable as it reduces the load on the shared service. See <code>Download</code> and <code>session</code> mode.</li> <li>To visualize a session file obtained using the API. Similar to the previous point, this reduces the load on the shared service and recommended. Note that the API is optional and some instances may not support it. One can also host only the API without the graphical interface. See session API and <code>session</code> mode.</li> <li>kmviz has a <code>plot</code> mode allowing to make maps and plots from arbitrary data, i.e. a partial graphical interface for plotly. See Plot mode.</li> </ol>"},{"location":"quickstart/","title":"Quickstart","text":"<p>The repository includes small data and configuration files to quickly run an instance of kmviz using a local index constructed with kmindex. The example mimics the Tara Ocean data: each input sample corresponds to a sampling station in the oceans and is associated with metadata.</p>"},{"location":"quickstart/#requirements","title":"Requirements","text":"<ul> <li>kmindex (&gt;=0.5.3), see instructions for installation. We recommend the conda installation that includes kmindex dependencies.</li> <li>kmviz should be installed, see Installation.</li> </ul>"},{"location":"quickstart/#construct-an-index","title":"Construct an index","text":"<p>Presence/absence and abundance indexes are supported.</p>"},{"location":"quickstart/#presenceabsence-mode","title":"Presence/absence mode","text":"<pre><code>cd tests/small_example\nkmindex build -i index -f fof.txt -r my_index -d my_index_store -k 25 --hard-min 1 --bloom-size 100000 --cpr --nb-partitions 8 --threads 8\n</code></pre>"},{"location":"quickstart/#abundance-mode","title":"Abundance mode","text":"<pre><code>cd tests/small_example\nkmindex build -i index -f fof.txt -r my_index -d my_index_store -k 25 --hard-min 1 --nb-cell 100000 --bitw 4 --cpr --nb-partitions 8 --threads 8\n</code></pre>"},{"location":"quickstart/#start-a-kmindex-server","title":"Start a kmindex-server","text":"<p>Start a query server at <code>127.0.0.1:8080</code>. See <code>kmindex-server --help</code> if you need custom configuration. <pre><code>cd tests/small_example\nkmindex-server -i index\n</code></pre></p>"},{"location":"quickstart/#start-kmviz","title":"Start kmviz","text":"<pre><code>poetry shell\ncd tests/small_example\npython -m kmviz app -c config.toml start\n</code></pre> config.toml<pre><code>[databases]\n\n[databases.SMALL]\ntype = \"kmindex-server\"\n[databases.SMALL.params]\nurl = \"127.0.0.1\"\nport = 8080\n[databases.SMALL.metadata]\ntype = \"tsv\"\n[databases.SMALL.metadata.params]\npath = \"./metadata.tsv\"\nsep = \"\\t\"\nidx = \"Sample\"\ngeodata = { latitude = \"Lat\", longitude = \"Long\"}\n\n[cache]\n\n[cache.serverside]\ntype = \"disk\"\nparams.cache_dir = \".results/kmviz_serverside_cache\"\nparams.threshold = 0\nparams.default_timeout = 86400\n\n[cache.manager]\ntype = \"disk\"\nparams.directory = \".results/kmviz_manager_cache\"\n\n[cache.result]\ntype = \"disk\"\nparams.cache_dir = \".results/kmviz_result_cache\"\nparams.threshold = 0\nparams.default_timeout = 1209600\n\n[auth]\nsmall = \"small-password\"\n</code></pre> <p>The kmviz instance is now available at <code>127.0.0.1:8050</code>.</p> <p>A query test file is available here.</p>"},{"location":"api/","title":"API","text":"<p>A kmviz instance can  host a REST API that allows querying the underlying databases. When enabled, the available features are:</p> <ul> <li>Information query, which return info about the instance: list of databases, parameters, etc.</li> <li>Metadata query, which return a TSV file per query containing the hits and associated metadata.</li> <li>Session query, which return a JSON file that can be explored in any other kmviz instance running in session mode.</li> </ul> <p>Note that kmviz provides CLI tools to simplify the execution of these queries, avoiding the need to make raw HTTP requests.</p> kmviz apikmviz api infoskmviz api metadatakmviz api query <p>python -m kmviz api --helpUsage: python -m kmviz api [OPTIONS] COMMAND [ARGS]...  Query kmviz REST APIOptions:  -u, --url &lt;str&gt;               Host  [default: http://localhost]  -p, --port &lt;int&gt;              Port  -a, --auth &lt;user&gt;:&lt;password&gt;  HTTP BasicAuth credentials  --help                        Show this message and exit.Commands:  infos     Get databases information  metadata  Make queries and get results as a tsv dataframe  query     Make queries and get results as a json session file, viewable...</p> <p>python -m kmviz api infos --helpUsage: python -m kmviz api infos [OPTIONS]  Get databases informationOptions:  -r, --route &lt;str&gt;    Route  [default: /api]  -o, --output &lt;path&gt;  Output file  [default: stdout]  --help               Show this message and exit.</p> <p>python -m kmviz api metadata --helpUsage: python -m kmviz api metadata [OPTIONS]  Make queries and get results as a tsv dataframeOptions:  -r, --route &lt;str&gt;             Query route  [default: /api/query]  -o, --output &lt;dir&gt;            Output directory  [default: .]  -d, --database &lt;str&gt;          Database to query  [required]  -x, --opt &lt;opt_name&gt; &lt;value&gt;  Database option, -x &lt;opt_name&gt; &lt;value&gt;  -f, --fastx &lt;path&gt;            Path to fastx query file  [required]  --help                        Show this message and exit.</p> <p>python -m kmviz api query --helpUsage: python -m kmviz api query [OPTIONS]  Make queries and get results as a json session file, viewable using a local  kmviz instance. See kmviz app start sessionOptions:  -r, --route &lt;str&gt;               Query route  [default: /api/query]  -o, --output &lt;path&gt;             Output file  [default: stdout]  -d, --database &lt;str&gt;            Database to query  [required]  -x, --opt &lt;db_name&gt; &lt;opt_name&gt; &lt;value&gt;                                  Database options  -f, --fastx &lt;path&gt;              Path to fastx query file  [required]  --help                          Show this message and exit.</p>"},{"location":"api/info/","title":"Infos","text":"Method Route Header <code>GET</code> <code>&lt;url&gt;/api</code> - <p>Warning</p> <p><code>&lt;url&gt;/api</code> is the default route, but this may vary depending on the kmviz instance.</p> Using kmviz CLIUsing cURL <p>python -m kmviz api --url http://localhost --port 8050 infos &gt; infos.json</p> <p>curl -X GET http://localhost:8050/api &gt; infos.json</p> infos.json<pre><code>{\n  \"database\": {\n    \"ExampleDB\": {\n      \"options\": {\n        \"coverage\": {\n          \"state\": {\n            \"default\": 0.7,\n            \"max\": 1.0,\n            \"min\": 0.0,\n            \"name\": \"coverage\",\n            \"step\": 0.05,\n            \"value\": 0.1\n          },\n          \"type\": \"float\"\n        },\n        \"z\": {\n          \"state\": {\n            \"default\": 0,\n            \"max\": 5,\n            \"min\": 0,\n            \"name\": \"z\",\n            \"step\": 1,\n            \"value\": 3\n          },\n          \"type\": \"int\"\n        }\n      }\n    }\n  },\n  \"input\": {\n    \"alphabet\": \"all\",\n    \"max_query\": 4294967296,\n    \"max_query_size\": 4294967296,\n    \"max_size\": 4294967296\n  }\n}\n</code></pre>"},{"location":"api/metadata/","title":"Metadata","text":"Method Route Header <code>POST</code> <code>&lt;url&gt;/api/query/&lt;database_name&gt;</code> (<code>Content-Type</code>: <code>multipart/form-data</code>) <p>Form options</p> <ul> <li><code>&lt;option_name&gt;</code>: database option</li> <li><code>fastx</code>: Fasta or Fastq file</li> </ul> <p>Warning</p> <p><code>&lt;url&gt;/api/query/&lt;database_name&gt;</code> is the default route, but this may vary depending on the kmviz instance.</p> <p>Tip</p> <p>The response is a ZIP archive containing a TSV for each sequence query. The name of the file is a kmviz session ID, which can be used to load the results on the corresponding instance. See X for more details.</p> <p>Query Query.fa<pre><code>&gt;Query_0\nTGAACCTGGCAACTGGTGAAGAGACCGAAAGAATGGGAGATCCTAAGCCGCCACTCCTGGAGGACTAGCTCCGCCAGCGTGCGGATGCTATCCG\n&gt;Query_1\nGCTTGCTTCCTACTTAGTTCCGCGCCCTCTGCGGCGTTGTCACTACATCCTGACATGTATCCGGCGAGATGAATTTTAATCTAGTGAGCCTCGT\n</code></pre></p> Using kmviz CLIUsing cURL <p>python -m kmviz api --url http://localhost --port 8050 metadata --database ExampleDB --opt z 2 --fastx query.fa[kmviz:116f8d28] ~ 2024-07-21 13:35:27.000 ~ INFO ~ url=http://localhost, port=8050, auth=None[kmviz:116f8d28] ~ 2024-07-21 13:35:27.231 ~ INFO ~ POST http://localhost:8050/api/query/ExampleDB -&gt; status 200[kmviz:116f8d28] ~ 2024-07-21 13:35:27.232 ~ INFO ~ kmviz-c36bda10-1f44-4154-82ca-978ba3e3c286.zip</p> <p>curl -O -J -X POST -F'z=2' -F 'fastx=@./query.fa' http://localhost:8050/api/query/ExampleDBkmviz-c36bda10-1f44-4154-82ca-978ba3e3c286.zip</p> <p>Response</p> unzip kmviz-c36bda10-1f44-4154-82ca-978ba3e3c286.zipArchive:  kmviz-c36bda10-1f44-4154-82ca-978ba3e3c286.zip  extracting: Query_0.tsv  extracting: Query_1.tsvhead -n 4 Query_0.tsvID      CovXK   CovXB   CovYK   CovYB   Depth   Lat     Long    SSD     Temp    Salinity        Chl_a   O2      NO3 NO2      NH4     Fe      Phos    Si      Month   biome   T_woa   ampl_woa        sd_T_woa6DCM    0.957   0.691   1.471   1.423   DCM     36.5229 -4.0023 731                     55.2985         0.073991253 0.030633541      0.017879906     0.001383199     0.12475 1.71925 9       temperate       18.164  10.954  4.029559717283219DCM    0.8     0.577   1.257   1.199   DCM     39.1633 5.916   714     14.7076 25.6379 29.4855 75.0    0.01675451  0.048709321      0.015086659     0.00138773                      9       temperate       18.4135 10.808  4.1192507510468511DCM   0.186   0.134   0.186   0.263   DCM     41.6686 2.7996  697                                     0.024274436 0.031807316      0.009132409     0.001387775                     10      temperate       16.7145 8.745   3.43239780575762"},{"location":"api/session/","title":"Session","text":"Method Route Header <code>POST</code> <code>&lt;url&gt;/api/query</code> (<code>Content-Type</code>: <code>multipart/form-data</code>) <p>Form options</p> <ul> <li><code>&lt;database_name&gt;#&lt;option_name&gt;</code>: database option</li> <li><code>fastx</code>: Fasta or Fastq file</li> </ul> <p>Warning</p> <p><code>&lt;url&gt;/api/query</code> is the default route, but this may vary depending on the kmviz instance.</p> <p>Query Query.fa<pre><code>&gt;Query_0\nTGAACCTGGCAACTGGTGAAGAGACCGAAAGAATGGGAGATCCTAAGCCGCCACTCCTGGAGGACTAGCTCCGCCAGCGTGCGGATGCTATCCG\n&gt;Query_1\nGCTTGCTTCCTACTTAGTTCCGCGCCCTCTGCGGCGTTGTCACTACATCCTGACATGTATCCGGCGAGATGAATTTTAATCTAGTGAGCCTCGT\n</code></pre></p> Using kmviz CLIUsing cURL <p>python -m kmviz api --url http://localhost --port 8050 query --database ExampleDB --opt ExampleDB z 2 --fastx query.fa &gt; session.json</p> <p>curl -X POST -F'ExampleDB#z=2' -F 'fastx=@./query.fa' http://localhost:8050/api/query &gt; session.json</p> <p>The session file can then be explored using a local kmviz instance: <code>python -m kmviz app start session</code>. The interface is then available at <code>http://localhost:8050</code>. See kmviz session mode for more details.</p>"},{"location":"builtins/metadb/","title":"MetaDB","text":""},{"location":"builtins/metadb/#sqlite","title":"<code>SQLite</code>","text":"Parameter Description Default Required path Path to the <code>sqlite</code> file - table Table name - idx Column containing identifiers - geodata Columns containing geographical data, if applicable - sqlite_ex.yaml<pre><code>metadata:\n  type: \"sqlite\"\n  params:\n    path: \"./metadata.sqlite\"\n    table: \"table\"\n    idx: \"Sample\"\n    geodata:\n      latitude: \"Lat\"\n      longitude: \"Long\"\n</code></pre> sqlite_ex.toml<pre><code>[databases.Example.metadata]\ntype = \"sqlite\"\n[databases.Example.metadata.params]\npath = \"./metadata.sqlite\"\ntable = \"table\"\nidx = \"Sample\"\ngeodata = { latitude = \"Lat\", longitude = \"Long\"}\n</code></pre>"},{"location":"builtins/metadb/#tsv-file","title":"<code>TSV File</code>","text":"Parameter Description Default Required path Path to the <code>tsv</code> file - sep Separator '\\t' idx Column containing identifiers - geodata Columns containing geographical data, if applicable - tsv_ex.yaml<pre><code>metadata:\n  type: \"tsv\"\n  params:\n    path: \"./metadata.tsv\"\n    sep: \"\\t\"\n    idx: \"Sample\"\n    geodata:\n      latitude: \"Lat\"\n      longitude: \"Long\"\n</code></pre> tsv_ex.toml<pre><code>[databases.Example.metadata]\ntype = \"tsv\"\n[databases.Example.metadata.params]\npath = \"./metadata.tsv\"\nsep = \"\\t\"\nidx = \"Sample\"\ngeodata = { latitude = \"Lat\", longitude = \"Long\"}\n</code></pre>"},{"location":"builtins/metadb/#mysql-mariadb","title":"<code>MySQL / MariaDB</code>","text":"Parameter Description Default Required host DB server url - user Username - password Password - database Database name - table Table name - port DB server port 3306 idx Column containing identifiers - geodata Columns containing geographical data, if applicable - mysql_ex.yaml<pre><code>metadata:\n  type: \"mysql\"\n  params:\n    host: \"localhost\"\n    user: \"root\"\n    password: \"password\"\n    database: \"kmvizdb\"\n    table: \"table\"\n    geodata:\n      latitude: \"Lat\"\n      longitude: \"Long\"\n</code></pre> mysql_ex.toml<pre><code>[databases.Example.metadata]\ntype = \"mysql\"\n[databases.Example.metadata.params]\nhost =\"localhost\"\nuser = \"root\"\npassword = \"password\"\ndatabase = \"kmvizdb\"\ntable = \"table\"\nidx = \"Sample\"\ngeodata = { latitude = \"Lat\", longitude = \"Long\"}\n</code></pre>"},{"location":"builtins/metadb/#parquet","title":"<code>Parquet</code>","text":"Parameter Description Default Required files List of parquet files - idx Column containing identifiers - geodata Columns containing geographical data, if applicable - parquet_ex.yaml<pre><code>metadata:\n  type: \"parquet\"\n  params:\n    files: [\"/path/to/file.parquet\"]\n    idx: \"Sample\"\n    geodata:\n      latitude: \"Lat\"\n      longitude: \"Long\"\n</code></pre> parquet_ex.toml<pre><code>[databases.Example.metadata]\ntype = \"parquet\"\n[databases.Example.metadata.params]\nfiles = [\"/path/to/file.parquet\"]\nidx = \"Sample\"\ngeodata = { latitude = \"Lat\", longitude = \"Long\"}\n</code></pre>"},{"location":"builtins/notifier/","title":"Notifier","text":""},{"location":"builtins/notifier/#sendgrid","title":"SendGrid","text":"sendgrid_ex.toml<pre><code>[notif]\ntype = \"sendgrid\"\nsuccess = \"\"\"\nDear user,\n\nYour query over is complete.\n\nPlease visit http://localhost:8050/api/download/{SESSION}' to download your results. You can also visit 'http://localhost:8050/dashboard/{SESSION}' to visualize them using our web interface.\n\"\"\"\n\nfailure = \"\"\"\nDear user,\n\nYour query over failed. (session: {SESSION})\nReason: {REASON}\n\"\"\"\n\nsubject = \"\"\"\n[kmviz] {SESSION} \u2705\n\"\"\"\n\nsubject_failure = \"\"\"\n[kmviz] {SESSION} \u274c\n\n[notif.params]\napi_key = \"&lt;sendgrid api key&gt;\"\nsender = \"sender@sender.com\"\n</code></pre>"},{"location":"builtins/notifier/#smtp","title":"SMTP","text":"smtp_ex.toml<pre><code>[notif]\ntype = \"smtp\"\nsuccess = \"\"\"\nDear user,\n\nYour query over is complete.\n\nPlease visit http://localhost:8050/api/download/{SESSION}' to download your results. You can also visit 'http://localhost:8050/dashboard/{SESSION}' to visualize them using our web interface.\n\"\"\"\n\nfailure = \"\"\"\nDear user,\n\nYour query over failed. (session: {SESSION})\nReason: {REASON}\n\"\"\"\n\nsubject = \"\"\"\n[kmviz] {SESSION} \u2705\n\"\"\"\n\nsubject_failure = \"\"\"\n[kmviz] {SESSION} \u274c\n\n[notif.params]\nsender = \"sender@sender.com\"\nserver = \"mysmtp.server.com\"\nuser = \"user\"\npassword = \"password\"\n</code></pre>"},{"location":"builtins/provider/","title":"Provider","text":""},{"location":"builtins/provider/#kmindex-server-kmindex-v053","title":"<code>kmindex server (kmindex &gt;= v0.5.3)</code>","text":"Parameter Description Default Required url Index url - port Port - kmindex_server_ex.yaml<pre><code>Example:\n  type: \"kmindex-server\"\n  params:\n    url: \"127.0.0.1\"\n    port: 8080\n</code></pre> kmindex_server_ex.toml<pre><code>[databases.Example]\ntype = \"kmindex-server\"\n[databases.Example.params]\nurl = \"127.0.0.1\"\nport = 8080\n</code></pre>"},{"location":"builtins/provider/#user-options","title":"User options","text":"<ul> <li><code>z</code>: See kmindex documentation.</li> <li><code>coverage</code>: The min ratio of shared k-mer to consider a match between a query and a sample.</li> </ul>"},{"location":"cli/","title":"CLI","text":"python -m kmviz --helpUsage: python -m kmviz [OPTIONS] COMMAND [ARGS]...Options:  -v, --verbose [debug|info|warn|error]                                  Verbosity level  [default: info]  -d, --log-dir &lt;dir&gt;             Path to log directory  --help                          Show this message and exit.Commands:  api      Query kmviz REST API  app      Start kmviz  config   Configuration helpers  plugin   Plugin helpers  version  Show version and exit"},{"location":"cli/api/","title":"kmviz api","text":"<p>The <code>kmviz api</code> command group contains utilities to request the kmviz API without making manuel HTTP requests.</p> python -m kmviz api --helpUsage: python -m kmviz api [OPTIONS] COMMAND [ARGS]...  Query kmviz REST APIOptions:  -u, --url &lt;str&gt;               Host  [default: http://localhost]  -p, --port &lt;int&gt;              Port  -a, --auth &lt;user&gt;:&lt;password&gt;  HTTP BasicAuth credentials  --help                        Show this message and exit.Commands:  infos     Get databases information  metadata  Make queries and get results as a tsv dataframe  query     Make queries and get results as a json session file, viewable... kmviz api infoskmviz api metadatakmviz api query <p><code>kmviz api infos</code> retrieves instance information in <code>JSON</code> format. This information includes registered <code>databases</code> and their options, making it useful for constructing API requests.</p> <p>python -m kmviz api infos --helpUsage: python -m kmviz api infos [OPTIONS]  Get databases informationOptions:  -r, --route &lt;str&gt;    Route  [default: /api]  -o, --output &lt;path&gt;  Output file  [default: stdout]  --help               Show this message and exit.</p> <p><code>kmviz api metadata</code> command allows you to query a <code>database</code> and obtain a zip archive of results, with one <code>TSV</code> file per query sequence. Note that the archive name is a <code>session-id</code>, which can be used to reload the result on the interface associated with the API endpoint, if it exists.</p> <p>python -m kmviz api metadata --helpUsage: python -m kmviz api metadata [OPTIONS]  Make queries and get results as a tsv dataframeOptions:  -r, --route &lt;str&gt;             Query route  [default: /api/query]  -o, --output &lt;dir&gt;            Output directory  [default: .]  -d, --database &lt;str&gt;          Database to query  [required]  -x, --opt &lt;opt_name&gt; &lt;value&gt;  Database option, -x &lt;opt_name&gt; &lt;value&gt;  -f, --fastx &lt;path&gt;            Path to fastx query file  [required]  --help                        Show this message and exit.</p> <p><code>kmviz api query</code> allows you to query an instance to obtain a <code>JSON</code> session file, which can then be reloaded into a kmviz instance in <code>session mode</code>.</p> <p>python -m kmviz api query --helpUsage: python -m kmviz api query [OPTIONS]  Make queries and get results as a json session file, viewable using a local  kmviz instance. See kmviz app start sessionOptions:  -r, --route &lt;str&gt;               Query route  [default: /api/query]  -o, --output &lt;path&gt;             Output file  [default: stdout]  -d, --database &lt;str&gt;            Database to query  [required]  -x, --opt &lt;db_name&gt; &lt;opt_name&gt; &lt;value&gt;                                  Database options  -f, --fastx &lt;path&gt;              Path to fastx query file  [required]  --help                          Show this message and exit.</p>"},{"location":"cli/app/","title":"kmviz app","text":"python -m kmviz app --helpUsage: python -m kmviz app [OPTIONS] COMMAND [ARGS]...  Start kmvizOptions:  -c, --config &lt;path&gt;  Path to config file  --help               Show this message and exit.Commands:  deploy  Deployment with gunicorn (recommended for multi-user instances)  start   Start with flask server (recommenced for single users) kmviz app startkmviz app deploy <p><code>kmviz app start</code> runs an instance with Flask and supports all modes. It is recommended for single users.</p> <p>python -m kmviz app start --helpUsage: python -m kmviz app start [OPTIONS] [[db|session|plot|api]]  Start with flask server (recommenced for single users)  Mode:    - db (default)    - session: Session mode, see https://tlemane/github.io/kmviz/)    - plot: Plot mode, see https://tlemane/github.io/kmviz/)    - api: Only start the kmviz REST API (see https://tlemane/github.io/kmviz/)Options:  -u, --url &lt;str&gt;   url  [default: localhost]  -p, --port &lt;int&gt;  port  [default: 8050]  -d, --debug  --help            Show this message and exit.</p> <p><code>kmviz app deploy</code> runs an instance on a production-ready WSGI server, i.e. Gunircorn. It supports only <code>db</code> and <code>api</code> modes. It is recommended for deploying instances.</p> <p>python -m kmviz app deploy --helpUsage: python -m kmviz app deploy [OPTIONS]  Deployment with gunicorn (recommended for multi-user instances)Options:  -m, --mode &lt;str&gt;               Mode, 'db' or 'api'  [default: db]  -u, --url &lt;str&gt;                Host  [default: localhost]  -p, --port &lt;int&gt;               Port  [default: 8000]  -w, --workers &lt;int&gt;            Number of workers  [default: 25]  -r, --reload-extra-file &lt;str&gt;  Reload when files change  -e, --extra &lt;option&gt; &lt;value&gt;   Extra gunicorn options  --help                         Show this message and exit.</p>"},{"location":"cli/config/","title":"kmviz config","text":"python -m kmviz config --helpUsage: python -m kmviz config [OPTIONS] COMMAND [ARGS]...  Configuration helpersOptions:  --help  Show this message and exit.Commands:  check     Valid configuration file.  schema    Make JSON schema  template  Make configuration templates kmviz config checkkmviz config schemakmviz config template <p><code>kmviz config check</code> allows you to validate a configuration file (<code>JSON</code>, <code>TOML</code> or <code>YAML</code>) for syntax, required fields, variable types, etc. With the <code>--with-init</code> flag, it also attempts an initialization, such as connecting to databases, loading plugins, etc.</p> <p>python -m kmviz config check --helpUsage: python -m kmviz config check [OPTIONS]  Valid configuration file. With --with-init, the validation process also  tries to init the app, i.e. connect to databases, load plugins, etcOptions:  -c, --config &lt;path&gt;  Path to config file  [required]  -w, --with-init      Try to init  -d, --details        Show schema on error  --help               Show this message and exit.</p> <p><code>kmviz config schema</code> command dumps a JSON validation schema for the configuration.</p> <p>python -m kmviz config schema --helpUsage: python -m kmviz config schema [OPTIONS]  Make JSON schemaOptions:  -o, --output &lt;path&gt;  Output file prefix  [default: stdout]  --help               Show this message and exit.</p> <p><code>kmviz config template</code> command allows to generate complete or partial configuration file templates in all supported formats, such as <code>JSON</code>, <code>TOML</code>, and <code>YAML</code>.</p> <p>python -m kmviz config template --helpUsage: python -m kmviz config template [OPTIONS]  Make configuration templatesOptions:  -f, --fmt [toml|yaml|json]      File format  [default: yaml]  -s, --section [all|databases|input|api|auth|defaults|plugins|cache|html]                                  [default: all]  -o, --output &lt;path&gt;             Output file prefix  [default: stdout]  --help                          Show this message and exit.</p>"},{"location":"cli/plugin/","title":"kmviz plugin","text":"python -m kmviz plugin --helpUsage: python -m kmviz plugin [OPTIONS] COMMAND [ARGS]...  Plugin helpersOptions:  --help  Show this message and exit.Commands:  list  List installed plugins"},{"location":"configuration/","title":"Configuration","text":"<p>kmviz can be configured using <code>YAML</code>, <code>TOML</code> or <code>JSON</code> configuration files. The documentation uses <code>TOML</code> format but complete examples for <code>YAML</code> and <code>JSON</code> are available at the end of the page. The configuration is divided into different sections which are described below. Note that sections are presented separately for clarity but should be placed in the same file.</p>"},{"location":"configuration/#sections","title":"Sections","text":""},{"location":"configuration/#databases","title":"<code>databases</code>","text":"<p>The <code>databases</code> section is required and defines one or more <code>Database(s)</code>.</p> <p>A database is a pair of:</p> <ul> <li>a <code>Provider</code> to perform search is sequence indexes. See Builtins Provider</li> <li>a <code>MetaDB</code> to associate results with metadata. See Builtins MetaDB</li> </ul> <pre><code># Configure Provider for ExampleDB\n[databases.ExampleDB]\ntype = \"kmindex-server\"\n\n# Path to a file with some figure presets (json, toml or yaml)\n# See Presets section at this end of the page\npresets = \"./presets.toml\"\n\n# The 'params' section corresponds to the parameters passed to the Provider ctor\n[databases.ExampleDB.params]\nurl = \"127.0.0.1\"\nport = 8080\n\n# kmindex-server Provider has two options for users\n# Here we set the default values and decide to hide or not\n# the option for the users.\n[databases.ExampleDB.defaults.z]\nvalue = 2\nhide = true\n[databases.ExampleDB.defaults.coverage]\nvalue = 0.1\nhide = false\n\n# Configure MetaDB for ExampleDB\n[databases.ExampleDB.metadata]\ntype = \"tsv\"\n# The 'params' section corresponds to the parameters passed to the MetaDB ctor\n[databases.ExampleDB.metadata.params]\npath = \"./metadata.tsv\"\nsep = \" \"\nidx = \"Sample\"\n# If the metadata contains location information\n[databases.ExampleDB.metadata.params.geodata]\nlatitude = \"Lat\"\nlongitude = \"Long\"\n</code></pre>"},{"location":"configuration/#default","title":"<code>default</code>","text":"<pre><code>[default]\ndatabase = [\"ExampleDB\"]      # The database(s) selected by default\nconfiguration = \"ExampleDB\"   # The database configuration displayed by default\n\n# If true, the database selector is hidden.\n# Useful to simplify the usage when the instance\n# contains only one database\nhide = false\n</code></pre>"},{"location":"configuration/#notif","title":"<code>notif</code>","text":"<p>The <code>notif</code> section allows to set up a mail notifier. See See Builtins Notifier</p>"},{"location":"configuration/#cache","title":"<code>cache</code>","text":"<p>kmviz requires some caches. For local instances, cache configuration is not a critical point. The example below will work in many cases.</p> <pre><code>[cache.result]\ntype = \"disk\"\n[cache.result.params]\ncache_dir = \".kmviz/result\"\nthreshold = 0\ndefault_timeout = 86400\n\n[cache.server]\ntype = \"disk\"\n[cache.server.params]\ncache_dir = \".kmviz/server\"\nthreshold = 0\ndefault_timeout = 86400\n\n[cache.manager]\ntype = \"disk\"\n[cache.manager.params]\ndirectory = \".kmviz/manager\"\n</code></pre> <p>\u26a0 For multi-user instances, a particular attention is recommended, see Deploy.</p>"},{"location":"configuration/#input","title":"<code>input</code>","text":"<p>The <code>input</code> section is optional and defines the input constraints. The example below corresponds to the default values.</p> <pre><code>[input]\nmax_query_size = 4294967296   # Max number of symbols per query\nmax_size = 4294967296         # Max number of symbols for all queries\nmax_query = 4294967296        # Max number of queries\nalphabet = \"all\"              # Use \"dna\" or \"amino\" to perform a check when loading the queries\n</code></pre>"},{"location":"configuration/#ui","title":"<code>ui</code>","text":"<p>The <code>ui</code> section is optional and defines the tabs to display.</p> <pre><code>[ui]\nwith_index_tab = false\nwith_sequence_tab = false\nwith_map_tab = false\nwith_plot_tab = false\n</code></pre>"},{"location":"configuration/#auth","title":"<code>auth</code>","text":"<p>At the moment, kmviz has limited authentication support with only HTTP BasicAuth. Crendentials can be specified directly in the configuration file, or retrieved through the system keyring service. See jaraco/keyring for the list of supported keyring backends.</p> config.toml (Inline)<pre><code>[auth]\nusername = \"password\"\nusername_2 = \"password_2\"\n</code></pre> config.toml (Keyring)<pre><code>auth = [\"username\", \"username_2\"]\n</code></pre>"},{"location":"configuration/#api","title":"<code>api</code>","text":"<p>The <code>api</code> section is optinal and allows to configure the kmviz API.</p> <pre><code>[api]\nenabled = false\nroute = \"/api\"\nquery_route = \"/query\"\n\n[api.limits]\nmax_query_size = 4294967296     # Same as [input] section but only applies on API calls\nmax_size = 4294967296\nmax_query = 4294967296\nalphabet = \"all\"\n</code></pre> <p>Using the previous configuration will produce the following API endpoints:</p> <ul> <li><code>GET  &lt;url&gt;/api</code>, see API Infos</li> <li><code>POST &lt;url&gt;/api/query</code>, see API Session</li> <li><code>POST &lt;url&gt;/api/query/&lt;database&gt;</code>, see API Metadata</li> </ul>"},{"location":"configuration/#html","title":"<code>html</code>","text":"<p>The <code>html</code> section is optional and allows to change the Dash HTML template or add Meta Tags.</p> <pre><code>[html]\ntemplate = \"/path/to/template.html\"\n\n[html.metatags]\ndescription = \"kmviz ex description\"\n</code></pre>"},{"location":"configuration/#plugins","title":"<code>plugins</code>","text":"<p>The <code>plugins</code> section allows to load kmviz plugins. To read more about plugins, see Plugins.</p> <pre><code>[plugins.kmviz_instance_plugin]\n# Parameters passed to the plugins for configuration, can be empty.\nkey = \"value\"\n</code></pre>"},{"location":"configuration/#global-fields","title":"Global fields","text":"<pre><code># Path to custom stylesheets\n# Documentation about kmviz customization using CSS\n# will be available later\nassets = [\"/path/to/custom/style.css\"]\n\n# \"flex\" or \"fixed\"\n# \"fixed\": A figure is made using the presets but the fields, like \"title\", are not populated on the interface\n# \"flex\": A preset populates the interface fields and then the figure is updated.\n#\n# \"flex\" is probably better but can sometimes slighty slowdown the figure creation.\npreset = \"fixed\"\n</code></pre>"},{"location":"configuration/#configuration-cli","title":"Configuration CLI","text":"<p>Some configuration helpers are available as small CLI tools: <code>kmviz config template</code>, <code>kmviz config check</code>, and <code>kmviz config schema</code>. See config CLI.</p>"},{"location":"configuration/#yaml-example","title":"<code>YAML</code> Example","text":"<code>python -m kmviz config template -s all --fmt yaml &gt; config.yaml</code><pre><code>api:\n  enabled: false\n  limits:\n    alphabet: all\n    max_query: 4294967296\n    max_query_size: 4294967296\n    max_size: 4294967296\n  query_route: /query\n  route: /api\nassets: []\nauth:\n  ex_user: ex_password\ncache:\n  manager:\n    params:\n      directory: .kmviz/manager\n    type: disk\n  result:\n    params:\n      cache_dir: .kmviz/result\n      default_timeout: 86400\n      threshold: 0\n    type: disk\n  server:\n    params:\n      cache_dir: .kmviz/server\n      default_timeout: 86400\n      threshold: 0\n    type: disk\ndatabases:\n  ExampleDB:\n    defaults:\n      coverage:\n        hide: false\n        value: 0.1\n      z:\n        hide: true\n        value: 2\n    metadata:\n      params:\n        geodata:\n          latitude: Lat\n          longitude: Long\n        idx: Sample\n        path: ./metadata.tsv\n        sep: \"\\t\"\n      type: tsv\n    params:\n      port: 8080\n      url: 127.0.0.1\n    presets: ./presets.toml\n    type: kmindex-server\ndefault:\n  configuration: ExampleDB\n  database:\n  - ExDB\n  hide: false\nhtml:\n  metatags:\n    description: kmviz ex description\n  template: template.html\ninput:\n  alphabet: all\n  max_query: 4294967296\n  max_query_size: 4294967296\n  max_size: 4294967296\nplugins:\n  kmviz_example: {}\n</code></pre>"},{"location":"configuration/#json-example","title":"<code>JSON</code> Example","text":"<code>python -m kmviz config template -s all --fmt json &gt; config.json</code><pre><code>{\n    \"databases\": {\n        \"ExampleDB\": {\n            \"type\": \"kmindex-server\",\n            \"params\": {\n                \"url\": \"127.0.0.1\",\n                \"port\": 8080\n            },\n            \"defaults\": {\n                \"z\": {\n                    \"value\": 2,\n                    \"hide\": true\n                },\n                \"coverage\": {\n                    \"value\": 0.1,\n                    \"hide\": false\n                }\n            },\n            \"metadata\": {\n                \"type\": \"tsv\",\n                \"params\": {\n                    \"path\": \"./metadata.tsv\",\n                    \"sep\": \"\\t\",\n                    \"idx\": \"Sample\",\n                    \"geodata\": {\n                        \"latitude\": \"Lat\",\n                        \"longitude\": \"Long\"\n                    }\n                }\n            },\n            \"presets\": \"./presets.toml\"\n        }\n    },\n    \"input\": {\n        \"max_query_size\": 4294967296,\n        \"max_size\": 4294967296,\n        \"max_query\": 4294967296,\n        \"alphabet\": \"all\"\n    },\n    \"default\": {\n        \"database\": [\n            \"ExDB\"\n        ],\n        \"configuration\": \"ExampleDB\",\n        \"hide\": false\n    },\n    \"cache\": {\n        \"result\": {\n            \"type\": \"disk\",\n            \"params\": {\n                \"cache_dir\": \".kmviz/result\",\n                \"threshold\": 0,\n                \"default_timeout\": 86400\n            }\n        },\n        \"server\": {\n            \"type\": \"disk\",\n            \"params\": {\n                \"cache_dir\": \".kmviz/server\",\n                \"threshold\": 0,\n                \"default_timeout\": 86400\n            }\n        },\n        \"manager\": {\n            \"type\": \"disk\",\n            \"params\": {\n                \"directory\": \".kmviz/manager\"\n            }\n        }\n    },\n    \"auth\": {\n        \"ex_user\": \"ex_password\"\n    },\n    \"html\": {\n        \"template\": \"template.html\",\n        \"metatags\": {\n            \"description\": \"kmviz ex description\"\n        }\n    },\n    \"api\": {\n        \"enabled\": false,\n        \"route\": \"/api\",\n        \"query_route\": \"/query\",\n        \"limits\": {\n            \"max_query_size\": 4294967296,\n            \"max_size\": 4294967296,\n            \"max_query\": 4294967296,\n            \"alphabet\": \"all\"\n        }\n    },\n    \"plugins\": {\n        \"kmviz_example\": {}\n    },\n    \"assets\": [],\n    \"preset\": \"flex\"\n}\n</code></pre>"},{"location":"configuration/#presets","title":"Presets","text":"presets.toml<pre><code># If true, the presets take precedence over the interface options\npriority = true\n\n# Define a map preset 'preset_1'\n[map.preset_1]\ncolor = \"CovXK\"\ntemplate = \"ggplot2\"\n[map.preset_1.title]\ntitle_text = \"TEST\"\ntitle_x = 0.5\n\n# Define a plot preset 'preset_1'\n[plot.preset_1]\ntype = \"Scatter\"\nX = [\"CovXK\"]\nY = [\"CovXB\"]\n\n[defaults]\nmap = \"preset_1\"\nplot = \"preset_1\"\n</code></pre> Available options <pre><code>class title_presets(BaseModel):\n    title_text: Optional[str]=None\n    title_font_size: Optional[int]=None\n    title_font_familiy: Optional[Literal[\"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\", \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\"]]=None\n    title_font_color: Optional[str]=None\n\n    title_xanchor: Optional[Literal[\"auto\", \"left\", \"center\", \"right\"]]=None\n    title_xref: Optional[Literal[\"container\", \"paper\"]]=None\n    title_x: Annotated[Optional[float], Ge(0.0), Le(1.0)]=None\n\n    title_yanchor: Optional[Literal[\"auto\", \"top\", \"middle\", \"bottom\"]]=None\n    title_yref: Optional[Literal[\"container\", \"paper\"]]=None\n    title_y: Annotated[Optional[float], Ge(0.0), Le(1.0)]=None\n\nclass legend_presets(BaseModel):\n    legend_title_text: Optional[str]=None\n    legend_title_font_size: Optional[int]=None\n    legend_title_font_familiy: Optional[Literal[\"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\", \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\"]]=None\n    legend_title_font_color: Optional[str]=None\n\n    legend_xanchor: Optional[Literal[\"auto\", \"left\", \"center\", \"right\"]]=None\n    legend_xref: Optional[Literal[\"container\", \"paper\"]]=None\n    legend_x: Annotated[Optional[float], Ge(0.0), Le(1.0)]=None\n    legend_yanchor: Optional[Literal[\"auto\", \"top\", \"middle\", \"bottom\"]]=None\n    legend_yref: Optional[Literal[\"container\", \"paper\"]]=None\n    legend_y: Annotated[Optional[float], Ge(0.0), Le(1.0)]=None\n\n    legend_indentation: Annotated[Optional[int], Ge(-15), Le(100)]=None\n    legend_orientation: Optional[Literal[\"v\", \"h\"]]=None\n\n    legend_font_size: Optional[int]=None\n    legend_font_familiy: Optional[Literal[\"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\", \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\"]]=None\n    legend_font_color: Optional[str]=None\n\n    legend_borderwidth: Annotated[Optional[int], Ge(0), Le(100)]=None\n    legend_bordercolor: Optional[str]=None\n    legend_bgcolor: Optional[str]=None\n\nclass map_presets(BaseModel):\n    color: Optional[str]=None\n    size: Optional[str]=None\n    text: Optional[str]=None\n    symbol: Optional[str]=None\n    animation_frame: Optional[str]=None\n    animation_group: Optional[str]=None\n    template: Optional[str]=None\n    projection: Optional[str]=None\n    color_seq_continuous_scale: Optional[str]=None\n    color_div_continuous_scale: Optional[str]=None\n    color_cyc_continuous_scale: Optional[str]=None\n    color_continuous_midpoint: Optional[Union[int, float]]=None\n    opacity: Annotated[Optional[float], Ge(0.0), Le(1.0)]=None\n    size_max: Annotated[Optional[int], Ge(0), Le(50)]=None\n    color_discrete_map: Optional[Dict[Any, str]]=None\n    symbol_map: Optional[Dict[Any, str]]=None\n    color_discrete_sequence: Optional[List[str]]=None\n    symbol_sequence: Optional[List[str]]=None\n\n    title: Optional[title_presets]=title_presets()\n    legend: Optional[legend_presets]=legend_presets()\n\nclass plot_presets(BaseModel):\n    type: str\n\n    X: Optional[List[str]]=None\n    Y: Optional[List[str]]=None\n    Z: Optional[List[str]]=None\n    color: Optional[str]=None\n    size: Optional[str]=None\n    text: Optional[str]=None\n    symbol: Optional[str]=None\n    pattern_shape: Optional[str]=None\n    base: Optional[str]=None\n    line_dash: Optional[str]=None\n    line_group: Optional[str]=None\n    dimensions: Optional[List[str]]=None\n    values: Optional[str]=None\n    names: Optional[str]=None\n\n    animation_frame: Optional[str]=None\n    animation_group: Optional[str]=None\n    template: Optional[str]=None\n\n    color_seq_continuous_scale: Optional[str]=None\n    color_div_continuous_scale: Optional[str]=None\n    color_cyc_continuous_scale: Optional[str]=None\n    color_continuous_midpoint: Optional[Union[int, float]]=None\n    opacity: Annotated[Optional[float], Ge(0.0), Le(1.0)]=None\n    size_max: Annotated[Optional[int], Ge(0), Le(50)]=None\n\n    color_discrete_map: Optional[Dict[Any, str]]=None\n    symbol_map: Optional[Dict[Any, str]]=None\n    color_discrete_sequence: Optional[List[str]]=None\n    symbol_sequence: Optional[List[str]]=None\n\n    pattern_shape_map: Optional[Dict[Any, str]]=None\n    line_dash_map: Optional[Dict[Any, str]]=None\n    pattern_shape_sequence: Optional[List[str]]=None\n    line_dash_sequence: Optional[List[str]]=None\n\n    trendline: Optional[Literal[\"ols\", \"lowess\", \"rolling\", \"expanding\", \"ewm\"]]=None\n    trendline_scope: Optional[Literal[\"trace\", \"overall\"]]=None\n    trendline_options: Optional[Dict[Any, str]]=None\n\n    marginal_x: Optional[Literal[\"rug\", \"box\", \"violin\", \"histogram\"]]=None\n    marginal_y: Optional[Literal[\"rug\", \"box\", \"violin\", \"histogram\"]]=None\n\n    facet_row: Optional[str]=None\n    facet_col: Optional[str]=None\n    facet_col_spacing: Annotated[Optional[float], Ge(0.0), Le(1.0)]=None\n    facet_row_spacing: Annotated[Optional[float], Ge(0.0), Le(1.0)]=None\n    facet_col_wrap: Annotated[Optional[int], Ge(0), Le(10)]=None\n\n    title: Optional[title_presets]=title_presets()\n    legend: Optional[legend_presets]=legend_presets()\n</code></pre>"},{"location":"configuration/user_options/","title":"User options","text":"<p><code>Providers</code> can provide query time options for users. The different types of options, and the associated input interfaces, are shown below.</p>"},{"location":"configuration/user_options/#rangeoption","title":"RangeOption","text":"<p><code>RangeOption</code> is</p> <p></p>"},{"location":"configuration/user_options/#numericoption","title":"NumericOption","text":"<p><code>NumericOption</code></p> <p></p>"},{"location":"configuration/user_options/#choiceoption","title":"ChoiceOption","text":"<p><code>ChoiceOption</code></p> <p></p>"},{"location":"configuration/user_options/#multichoiceoption","title":"MultiChoiceOption","text":"<p><code>MultiChoiceOption</code></p> <p></p>"},{"location":"configuration/user_options/#textoption","title":"TextOption","text":"<p><code>TetxOption</code></p> <p></p>"},{"location":"deploy/","title":"Deployment","text":"<p>While the default development server (flask) is fine for running kmviz locally, it is recommended to use a production-ready server to deploy an instance that can be accessed by several users.</p> <p>kmviz offers a small CLI tool to deploy an instance using gunicorn.</p> python -m kmviz app deploy --helpUsage: python -m kmviz app deploy [OPTIONS]    Deployment with gunicorn (recommended for multi-user instances)Options:    -m, --mode &lt;str&gt;               Mode, 'db' or 'api'  [default: db]    -u, --url &lt;str&gt;                Host  [default: localhost]    -p, --port &lt;int&gt;               Port  [default: 8000]    -w, --workers &lt;int&gt;            Number of workers  [default: 25]    -r, --reload-extra-file &lt;str&gt;  Reload when files change    -e, --extra &lt;option&gt; &lt;value&gt;   Extra gunicorn options    --help                         Show this message and exit. <p>Ex: <code>python -m kmviz app -c config.toml deploy -u 0.0.0.0 --port 8080 -w 8</code></p> <p>We provide a docker image,  tlemane/kmviz, to easily deploy <code>kmviz</code> using <code>gunicorn</code> (see Docker).</p> <p>See Docker compose for a complete deployment example including:</p> <ul> <li>A sequence index, using kmindex.</li> <li>A metadata db, using MySQL.</li> <li>A kmviz instance</li> </ul>"},{"location":"deploy/#deploy-with-another-server","title":"Deploy with another server","text":"<p>The following WSGI servers have been tested:</p> <ul> <li>gunicorn</li> <li>fastwsgi</li> <li>socketify</li> </ul> <p>Note</p> <p>The WSGI application is located at <code>kmviz/app.py</code> and the variable named is <code>app</code>. For example with <code>gunicorn</code>: <code>gunicorn -w 1 kmviz.app:app</code></p> <p>Note</p> <p>When executed with a WSGI server, the path to the configuration file is given by the <code>KMVIZ_CONF</code> environment variable.</p>"},{"location":"deploy/compose/","title":"Deploy a kmviz instance","text":"<p>This page describes how to deploy an instance of kmviz along with a kmindex server and a MySQL DB for metadata using <code>docker compose</code>, and  tlemane/kmviz,  tlemane/kmindex,  mysql/mysql-server docker images.</p>"},{"location":"deploy/compose/#0-index-construction","title":"0. Index construction","text":"<p>This guide does not describe how to build an index. See index construction for instructions.</p> <p>For the example, we assume that the index was built using: <code>kmindex build -i kmindex_directory/global_index -r index_1 -d kmindex_directory/index_1_directory ...</code>.</p> <p>A kmindex index is a directory composed of one json file, <code>index.json</code>, and one or more symlinks for each registered sub-index. According to the previous command, we have one index <code>index_1</code> registered in the global index <code>global_index</code>, as illustrated below.</p> kmindex_directory structure<pre><code>kmindex_directory\n\u251c\u2500\u2500 global_index\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index_1 -&gt; /path/to/kmindex_directory/index_1_directory\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 index.json\n\u2514\u2500\u2500 index_1_directory\n</code></pre>"},{"location":"deploy/compose/#1-the-kmindex-service","title":"1. The <code>kmindex-service</code>","text":"<p>The <code>kmindex-service</code> is a docker container that runs a <code>kmindex-server</code> instance allowing to query <code>kmindex</code> indexes through HTTP requests.</p> kmindex-service<pre><code>services:\n  kmindex-service:\n    container_name: kmindex-service_cnt\n    image: tlemane/kmindex:latest\n    volumes:\n      - ./kmindex_directory:/home/\n    entrypoint: kmindex-server\n    command: \"--index /home/global_index -a 0.0.0.0 --port 8080 -d /home/kmindex_logs\"\n    ports:\n      - \"8080:8080\"\n</code></pre>"},{"location":"deploy/compose/#patch-the-index","title":"Patch the index","text":"<p>The index produced by <code>kmindex</code> requires small patches to be used in this configuration. These patches can be applied using the following script.</p> patch_index.sh<pre><code>#!/usr/bin/env bash\n\nindex_path=$1\nnew_path_prefix=\"/home\"\n\nindexes=$(ls --ignore=index.json ${index_path})\n\nfor index in ${indexes}\ndo\n    path=$(realpath ${index_path}/${index})\n    base=$(basename ${path})\n    rm ${index_path}/${index}\n    ln -s ${new_path_prefix}/${base} ${index_path}/${index}\ndone\n\nnew_index_path=${new_path_prefix}/$(basename ${index_path})\n\njq --arg new_index_path \"$new_index_path\" '.path = $new_index_path' ${index_path}/index.json &gt; tmp.json\nmv tmp.json ${index_path}/index.json\n</code></pre> <pre><code>bash patch_index.sh kmindex_directory/global_index\n</code></pre> About the patches"},{"location":"deploy/compose/#fix-symlinks","title":"Fix symlinks","text":"<p>A <code>kmindex</code> index is a directory composed of one json file, <code>index.json</code>, and one or more symlink pointing to the index directories. In the example, only one sub-index <code>index_1</code> is registered. Within the docker, <code>kmindex_directory</code> is mounted at <code>/home/</code>. As a result, the symlink <code>global_index/index_1</code> should point to the index directory <code>/home/index_1_directory</code></p> kmindex_directory structure<pre><code>kmindex_directory\n\u251c\u2500\u2500 index\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index_1 -&gt; /path/to/kmindex_directory/index_1_directory\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 index.json\n\u2514\u2500\u2500 index_1_directory\n</code></pre>"},{"location":"deploy/compose/#fix-json-index-path","title":"Fix json index path","text":"<p>The <code>index.json</code> file contains an absolute path to its parent directory, e.g. <code>\"path\": \"&lt;prefix&gt;/kmindex_directory/index\"</code>. This field should be replaced with <code>\"path\": \"/home/&lt;directory_name&gt;\"</code>.</p>"},{"location":"deploy/compose/#2-the-metadata-service","title":"2. The <code>metadata-service</code>","text":"<p>The <code>metadata-service</code> is a docker container that runs a <code>mysql</code> server. In this example, the we assume a database <code>mydb</code> containing a <code>mytable</code> table. The db is created by <code>init.sql</code> instructions on the first container run.</p> metadata-service<pre><code>services:\n  metadata-service:\n    container_name: metadata-service_cnt\n    image: mysql/mysql-server\n    environment:\n      MYSQL_ROOT_PASSWORD: kmviz_password\n      MYSQL_ROOT_HOST: '%'\n    volumes:\n      - mysql-storage:/var/lib/mysql\n      - init.sql:/home/init.sql            # Instructions to create the db and the table\n    command: \"--init-file /home/init.sql\"\n    ports:\n      - \"3036:3036\"\n\n# Create a /var/lib/docker/volumes/mysql-storage on the host to\n# store the db data in a persistent way.\n# 'docker compose down' will not remove the volume\n# Use 'docker compose down -v' to delete the volume (and data)\nvolumes:\n  - mysql-storage:\n</code></pre>"},{"location":"deploy/compose/#3-the-kmviz-service","title":"3. The <code>kmviz-service</code>","text":"<p>The <code>kmviz-service</code> is a docker container that runs the kmviz web service. It depends on the previous services <code>kmindex-service</code> and <code>metadata-service</code>.</p> kmviz-service<pre><code>services:\n  kmviz:\n    image: tlemane/kmviz:latest\n    volumes:\n      - ./kmviz_directory:/home/\n    depends_on:\n      - kmindex-service\n      - metadata-service\n    command: \"-w 1 -u 0.0.0.0 -p 5000\"\n    ports:\n      - \"5000:5000\"\n</code></pre> kmviz_directory/config.toml<pre><code>[databases]\n\n[databases.TARA]\ntype = \"kmindex-server\"\n[databases.TARA.params]\nurl = \"kmindex-service\"\nport = 8080\n[databases.TARA.metadata]\ntype = \"mysql\"\n[databases.TARA.metadata.params]\nhost = \"metadata-service\"\ndatabase = \"mydb\"\nuser = \"root\"\npassword = \"kmviz_example\"\nidx = \"ID\"\ntable = \"mytable\"\ngeodata = { latitude = \"Lat\", longitude = \"Long\"}\n\n[cache]\n\n[cache.serverside]\ntype = \"disk\"\nparams.cache_dir = \".results/kmviz_serverside_cache\"\nparams.threshold = 0\nparams.default_timeout = 86400\n\n[cache.manager]\ntype = \"disk\"\nparams.directory = \".results/kmviz_manager_cache\"\n\n[cache.result]\ntype = \"disk\"\nparams.cache_dir = \".results/kmviz_result_cache\"\nparams.threshold = 0\nparams.default_timeout = 1209600\n</code></pre>"},{"location":"deploy/compose/#4-start-the-service","title":"4. Start the service","text":"Final directory structure<pre><code>compose.yml\nkmindex_directory\n\u251c\u2500\u2500 global_index\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index_1 -&gt; /home/index_1\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 index.json\n\u2514\u2500\u2500 index_1\nkmviz_directory\n\u2514\u2500\u2500 config.toml\n</code></pre> compose.yml<pre><code>services:\n  kmindex-service:\n    image: tlemane/kmindex:latest\n    volumes:\n      - ./kmindex_directory:/home/\n    entrypoint: kmindex-server\n    command: \"--index /home/index -a 0.0.0.0 --port 8080 -d /home/kmindex_logs\"\n    ports:\n      - \"8080:8080\"\n\n  metadata-service:\n    image: mysql/mysql-server\n    environment:\n      MYSQL_ROOT_PASSWORD: password\n      MYSQL_ROOT_HOST: '%'\n    volumes:\n      - mysql-storage:/var/lib/mysql\n      - init.sql:/home/init.sql\n    command: \"--init-file /home/init.sql\"\n    ports:\n      - \"3036:3036\"\n\n  kmviz-service:\n    image: tlemane/kmviz:latest\n    volumes:\n      - ./kmviz_directory:/home/\n    depends_on:\n      - kmindex-service\n      - metadata-service\n    command: \"-w 1 -u 0.0.0.0 -p 5000\"\n    ports:\n      - \"5000:5000\"\n\nvolumes:\n  mysql-storage:\n</code></pre> Start the service and detach<pre><code>docker compose up -d\n</code></pre> <p>The kmviz instance is now available at <code>localhost:5000</code>.</p>"},{"location":"deploy/compose/#appendix","title":"Appendix","text":""},{"location":"deploy/compose/#appendix-load-a-kmindex-plugin","title":"Appendix: Load a kmindex plugin","text":"<p>The default docker image does not contain any plugins. To install and use plugins, we create a new docker image based on <code>tlemane/kmviz</code> as described below.</p> compose.yml<pre><code>services:\n  kmviz-service:\n    build:\n      context: ./kmviz_docker\n      dockerfile: Dockerfile\n    volumes:\n      - ./kmviz_directory:/home/\n    depends_on:\n      - kmindex-service\n      - metadata-service\n    command: \"-w 1 -u 0.0.0.0 -p 5000\"\n    ports:\n      - \"5000:5000\"\n\nvolumes:\n  mysql-storage:\n</code></pre> kmviz_docker/Dockerfile<pre><code>FROM tlemane/kmviz:latest\n\nRUN apt-get install -y git\nENV PIP_SRC=/opt/\nRUN pip install -e \"git+https://github.com/tlemane/kmviz.git#subdirectory=plugins/kmviz_instance_plugin&amp;egg=kmviz_instance_plugin\"\n</code></pre> kmviz_directory/config.toml<pre><code>[plugins.kmviz_instance_plugin]\n</code></pre>"},{"location":"deploy/compose/#appendix-use-redis-caching","title":"Appendix: Use Redis caching","text":"compose.yml<pre><code>services:\n  redis-service:\n    image: redis:alpine\n    ports:\n      - \"6379:6379\"\n\n  kmviz-service:\n    image: tlemane/kmviz:latest\n    volumes:\n      - ./kmviz_directory:/home/\n    depends_on:\n      - kmindex-service\n      - metadata-service\n      - redis-service\n    command: \"-w 1 -u 0.0.0.0 -p 5000\"\n    ports:\n      - \"5000:5000\"\n\nvolumes:\n  mysql-storage:\n</code></pre> kmviz_directory/config.toml<pre><code>[databases]\n\n[databases.TARA]\ntype = \"kmindex-server\"\n[databases.TARA.params]\nurl = \"kmindex-service\"\nport = 8080\n[databases.TARA.metadata]\ntype = \"mysql\"\n[databases.TARA.metadata.params]\nhost = \"metadata-service\"\ndatabase = \"mydb\"\nuser = \"root\"\npassword = \"kmviz_example\"\nidx = \"ID\"\ntable = \"mytable\"\ngeodata = { latitude = \"Lat\", longitude = \"Long\"}\n\n[cache]\n\n[cache.serverside]\ntype = \"redis\"\nparams.host = \"redis-service\"\nparams.db = 0\n\n[cache.manager]\ntype = \"disk\"\nparams.directory = \".results/kmviz_manager_cache\"\n\n[cache.result]\ntype = \"redis\"\nparams.host = \"redis-service\"\nparams.db = 1\n</code></pre>"},{"location":"deploy/compose/#appendix-load-balancing","title":"Appendix: Load balancing","text":"<p>See Compose Deploy Specification</p> compose.yml<pre><code>services:\n  kmindex-service:\n    image: tlemane/kmindex:latest\n    volumes:\n      - ./kmindex_directory:/home/\n    entrypoint: kmindex-server\n    command: \"--index /home/index -a 0.0.0.0 --port 8080 -d /home/kmindex_logs\"\n    expose:\n      - 8080\n    deploy:\n      replicas: 3\n      endpoint_mode: dnsrr\n</code></pre>"},{"location":"deploy/compose/#appendix-analytics-with-matomo","title":"Appendix: Analytics with Matomo","text":"<p> Requires <code>kmviz</code>&gt;=<code>v0.3.2</code></p>"},{"location":"deploy/compose/#create-the-matomo-service","title":"Create the <code>matomo</code> service","text":"compose.yml<pre><code>services:\n  matomo:\n    image: matomo\n    volumes:\n      - matomo:/var/www/html:z\n    environment:\n      - MATOMO_DATABASE_HOST=matomo\n      - MYSQL_PASSWORD=password\n      - MYSQL_DATABASE=matomo\n      - MYSQL_USER=root\n      - MATOMO_DATABASE_ADAPTER=mysql\n      - MATOMO_DATABASE_TABLES_PREFIX=matomo_\n      - MATOMO_DATABASE_USERNAME=root\n      - MATOMO_DATABASE_PASSWORD=password\n      - MATOMO_DATABASE_DBNAME=matomo\n    depends_on:\n      - metadata-service\n    expose:\n      - 80\n    ports:\n      - 8040:80\n\nvolumes:\n  mysql-storage:\n  matomo:\n</code></pre> <p>Note that we use the database hosted by <code>metadata-service</code> to store the <code>matomo</code> tables.</p> <p>Because <code>matomo</code> does not support headless setup, you have to run the instance to follow the setup wizard.</p> <ol> <li><code>docker compose up metadata-service matomo</code></li> <li>Go to <code>localhost:8040</code> and follow the setup. For the <code>kmviz</code> url, use <code>http/localhost:8090</code>.</li> <li>Copy the js tag provided by <code>matomo</code> and put in <code>kmviz_directory/template.html</code>, as described below.</li> </ol> <p>kmviz_directory/template.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        {%metas%}\n        &lt;title&gt;{%title%}&lt;/title&gt;\n        {%favicon%}\n        {%css%}\n    &lt;/head&gt;\n        &lt;script&gt;\n          var _paq = window._paq = window._paq || [];\n          _paq.push(['trackPageView']);\n          _paq.push(['enableLinkTracking']);\n          (function() {\n            var u=\"//localhost:8040/\";\n            _paq.push(['setTrackerUrl', u+'matomo.php']);\n            _paq.push(['setSiteId', '1']);\n            var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n            g.async=true; g.src=u+'matomo.js'; s.parentNode.insertBefore(g,s);\n          })();\n        &lt;/script&gt;\n    &lt;body&gt;\n        {%app_entry%}\n        &lt;footer&gt;\n            {%config%}\n            {%scripts%}\n            {%renderer%}\n        &lt;/footer&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> 4. Update the <code>kmviz_directory/config.toml</code> to pass the html template, as described below. kmviz_directory/config.toml<pre><code>[html]\ntemplate = \"/home/template.html\"\n</code></pre> 5. Start all the services and finalize the tracking configuration in <code>matomo</code>.</p>"},{"location":"deploy/compose/#self-contained-example","title":"Self-contained example","text":"<p>A self-contained example is available here: self.tar.bz2.</p> <pre><code>wget https://raw.githubusercontent.com/tlemane/kmviz/main/tests/deploy_example/self.tar.bz2\ntar jxvf self.tar.bz2\ncd self\ndocker compose up\n</code></pre>"},{"location":"deploy/docker/","title":"Docker","text":"Dockerfile <pre><code>FROM python\n\nWORKDIR /home\n\nRUN pip install kmviz gunicorn\nENV KMVIZ_CONF=/home/config.toml\n\nENTRYPOINT [\"python\", \"-m\", \"kmviz\", \"app\", \"deploy\"]\nCMD [\"-u 0.0.0.0\", \"-p 8000\", \"-w 4\"]\n</code></pre> Start the service using docker<pre><code>docker pull tlemane/kmviz:latest\ndocker run -d --network=\"host\" -v.:/home/ tlemane/kmviz -w 1 -u 0.0.0.0 -p 8000\n</code></pre> <ul> <li> <p>Docker Options</p> <ul> <li><code>--network=\"host\"</code>: Use the host network</li> <li><code>-p .:/home/</code>: Mount <code>.</code> at <code>/home/</code></li> <li><code>-d</code>: Detach the container</li> </ul> </li> <li> <p>Server Options (See <code>kmviz app deploy</code>)</p> <ul> <li><code>-w</code>: The number of workers</li> <li><code>-u</code>: Host</li> <li><code>-p</code>: Port</li> </ul> </li> </ul> <p>By default, <code>KMVIZ_CONF</code> is set to <code>/home/config.toml</code>. To use another filename, use <code>docker run --env KMVIZ_CONF=/home/my_config.yaml ...</code>.</p>"},{"location":"deploy/docker/#about-cache","title":"About cache","text":"<p>3 caching systems are used in kmviz:</p> <ul> <li><code>manager</code>: For Background callback support</li> <li><code>serverside</code>: For Serverside output support</li> <li><code>result</code>: Store user sessions</li> </ul>"},{"location":"deploy/docker/#serverside-and-result-configuration","title":"<code>serverside</code> and <code>result</code> configuration","text":"<p>Available backends</p> <ul> <li><code>disk</code>, based on cachelib.FileSystemCache</li> <li><code>redis</code>, based on cachelib.RedisCache</li> </ul> Disk<pre><code>[cache.result]\ntype = \"disk\"\nparams.cache_dir = \"result_cache\"\nparams.threshold = 0\nparams.default_timeout = 1209600\n</code></pre> Redis<pre><code>[cache.result]\ntype = \"redis\"\nparams.host = \"localhost\"\nparams.port = 6379\nparams.db = 1\nparams.default_timeout = 86400\n</code></pre> <p>Note</p> <p><code>redis</code> is recommended for both <code>serverside</code> and <code>result</code> when deploying multi-user instances.</p> <p>About timeout</p> <ul> <li><code>result</code>: The <code>default_timeout</code> field corresponds the time during which a user can access a result without recomputing the query.</li> <li><code>serverside</code>: The cache should always return and value, i.e. keys should not expire during a user session. Use a significant value, e.g. 24 hours.</li> </ul>"},{"location":"deploy/docker/#manager-configuration","title":"<code>manager</code> configuration","text":"<p>Available backends</p> <ul> <li><code>disk</code>, based on DiskCache.Cache</li> <li><code>fanout</code>, based on DiskCache.FanoutCache ( coming soon)</li> <li><code>celery</code>, based on Celery ( coming soon)</li> </ul> Disk<pre><code>[cache.manager]\ntype = \"disk\"\nparams.directory = \".results/kmviz_manager_cache\"\n</code></pre>"},{"location":"deploy/docker/#complete-example","title":"Complete example","text":"config.toml<pre><code>[cache]\n\n[cache.serverside]\ntype = \"redis\"\n[cache.serverside.params]\nhost = \"localhost\"\nport = 6379\ndb = 0\ndefault_timeout = 86400\n\n[cache.manager]\ntype = \"disk\"\nparams.directory = \"./kmviz_manager_cache\"\n\n[cache.result]\ntype = \"disk\"\n[cache.result.params]\ncache_dir = \"./kmviz_result_cache\"\nthreshold = 0\ndefault_timeout = 1209600\n</code></pre>"},{"location":"interface/","title":"Interface","text":"<p> WIP </p>"},{"location":"interface/plot/","title":"Plot mode","text":"<p>kmviz support a <code>plot</code> mode that allows making maps and plots from arbitrary data (from <code>csv</code>,<code>tsv</code> or <code>xlsx</code>).</p> <p>The <code>plot</code> mode does not require any configuration and can be started as follows:</p> <pre><code>python -m kmviz app start plot\n</code></pre> <p>Once a tsv file is loaded, the interface is the same as the database interface, but without the sidebar and <code>Index</code> and <code>Sequence</code> tabs.</p> <p></p> Field Description Required Index Index column name Separator Column separator Longitude Longitude colmun name, if applicable Latitude Latitude colmun name, if applicable"},{"location":"interface/session/","title":"Session mode","text":"<p>kmviz supports a <code>session</code> mode that allows loading a session JSON file obtained via the API or downloaded from another kmviz instance.</p> <p>The <code>session</code> mode does not require any configuration and can be started as follows:</p> <pre><code>python -m kmviz app start session\n</code></pre> <p>An upload button is available at the top, otherwise the interface is the same as the database interface, but without the sidebar.</p> <p></p>"},{"location":"interface/database/","title":"Database mode","text":"<p>The kmviz interface is divided into 3 major areas.</p> <ol> <li>Input sidebar</li> <li>Navigation and selection header</li> <li>Main window</li> </ol> <p></p>"},{"location":"interface/database/index_table/","title":"Index Tab","text":"<p>The <code>Index</code> tab shows information about the <code>Database</code> selected by the <code>Database selector</code>:</p> <ul> <li>The top table contains various index information, e.g. number of samples, version, etc.</li> <li>The bottom table corresponds the complete metadata table.</li> </ul> <p></p>"},{"location":"interface/database/input/","title":"Input","text":""},{"location":"interface/database/input/#databases","title":"Database(s)","text":""},{"location":"interface/database/input/#selection","title":"Selection","text":"<p>In kmviz a <code>Database</code> refers to a pair of one <code>Provider</code>, i.e. a sequence index, and a <code>MetaDB</code>, i.e. a store that associate metadata to the samples indexed by the <code>Provider</code>. Before submitting your query, you have to select one or more <code>Database(s)</code>.</p> <p></p> <p>After selecting a <code>Database</code>, its configuration becomes available.</p>"},{"location":"interface/database/input/#configuration","title":"Configuration","text":"<p>In this example, <code>ExampleDB</code> uses <code>kmindex-server</code> which has two query options: <code>z</code> and <code>coverage</code>. For more details see kmindex documentation</p> <p>Note that all options are not always displayed. When hosting an instance, one can decide to fix (and hide) some options.</p>"},{"location":"interface/database/input/#sequences","title":"Sequence(s)","text":"<p>kmviz supports sequence(s) in <code>FASTA</code> or <code>FASTQ</code> format from raw text or file.</p>"},{"location":"interface/database/input/#session","title":"Session","text":"<p>After submitting a query, you receive a unique <code>session-id</code> that can be used to reload your results later. The <code>session-id</code> is a 42 characters string that matches <code>kmviz-[a-fA-Z1-9]{8}-[a-fA-Z1-9]{4}-[a-fA-Z1-9]{4}-[a-fA-Z1-9]{4}-[a-fA-Z1-9]{12}</code>, e.g. <code>kmviz-1fb396fd-96f2-45ba-bd78-fd23fde9921e</code>.</p> <p></p>"},{"location":"interface/database/map/","title":"Map Tab","text":"<p>Maps are made using <code>plotly.express.scatter_geo</code>.</p> <p>On click</p> <p>Clicking on a point jumps into the <code>Sequence</code> Tab to display the query coverage corresponding to this sample</p> <p>On selection</p> <p>Using <code>Box select</code> or <code>Lasso select</code> allows to select a subset of points. The selection filters the metadata table, i.e. it applies at global scope and is also reflected in the <code>Plot</code> tab.</p>"},{"location":"interface/database/nav/","title":"Navigation and selection","text":""},{"location":"interface/database/nav/#navigation","title":"Navigation","text":"<p>The navbar allows to switch between tabs. A dedicated help page is available for each one.</p> <p>Note that additionnal tabs can be provided by plugins.</p>"},{"location":"interface/database/nav/#selectors","title":"Selectors","text":"<p>kmviz can display results for only one pair of <code>Database</code>/<code>Query</code> at a time. For both, the selector is placed at the top right corner. The query names correspond to the FASTA/Q identifiers.</p>"},{"location":"interface/database/nav/#buttons","title":"Buttons","text":"<p>Two buttons are available at the top right corner.</p> <p></p> <p>The first one allows to enabled/disbaled figure auto updates. When making figures, kmviz distinguishes 2 types of action: those that create a new figure (the <code>Trace</code> tab for both maps and plots), e.g. change the plot type, and those that update the figure, e.g. change the title. The blue switch at the top right corner allows to enabled/disabled the auto updates. When enabled, all properties corresponding to update actions are automatically re-applied when the figure is modified. For example, if you set a title, then change the plot type, the title remains.</p> <p>The second one allows to download all the results in a session <code>JSON</code> file. A <code>session file</code> can be loaded by any kmviz instance running in <code>session mode</code>.</p>"},{"location":"interface/database/plot/","title":"Plot Tab","text":"<p>kmviz supports different plot types made with <code>plotly.express</code></p> <ul> <li><code>plotly.express.scatter</code></li> <li><code>plotly.express.line</code></li> <li><code>plotly.express.area</code></li> <li><code>plotly.express.bar</code></li> <li><code>plotly.express.violin</code></li> <li><code>plotly.express.box</code></li> <li><code>plotly.express.parallel_categories</code></li> <li><code>plotly.express.parallel_coordinates</code></li> <li><code>plotly.express.density_heatmap</code></li> <li><code>plotly.express.density_contour</code></li> </ul> <p>On click</p> <p>Clicking on a point jumps into the <code>Sequence</code> Tab to display the query coverage corresponding to this sample</p> <p>On selection</p> <p>Using <code>Box select</code> or <code>Lasso select</code> allows to select a subset of points. The selection filters the metadata table, i.e. it applies at global scope and is also reflected in the <code>Map</code> tab.</p>"},{"location":"interface/database/sequence/","title":"Sequence Tab","text":"<p>The <code>Sequence</code> Tab allows to visiualize the coverage along a query and proposes two different views.</p> <p></p> <p>The coverage view is only available for a pair <code>Query</code>/<code>Sample</code>. The <code>Sample</code> selector is placed close to top navigation bar.</p> <p>The <code>JSON</code> button allows to download a file containing the coverage information as presence/absence or abundance arrays. Note that it contains all coverage information corresponding to the selected <code>Query</code>, and not only the coverage of the selected <code>Sample</code>.</p> <p>Note</p> <p>Click on a point on the map or the plot jumps to the <code>Sequence</code> tab and shows figures corresponding the selected point.</p>"},{"location":"interface/database/sequence/#graph-view","title":"Graph view","text":"<p>The <code>Graph</code> view plots presence/absence or abundance of each k-mer/base along the query sequence. As maps and plots, an customization interface is provided below the figure.</p> <p></p>"},{"location":"interface/database/sequence/#sequence-view","title":"Sequence view","text":"<p>The <code>Graph</code> view represents presence/absence or abundance of each k-mer/base along the query sequence through a highlighted text area. The min and max of the color range can be modified using the <code>MIN COLOR</code> and <code>MAX COLOR</code> color pickers.</p> <p></p>"},{"location":"interface/database/submit/","title":"Submit","text":"<p>The <code>Submit</code> button triggers the query and pops up a notification indicating the progression of your request. Note that it contains a <code>session-id</code> to access your results later.</p> <p></p> <p>When the request was executed without any issues, you will observe the following alert.</p> <p></p> <p>On error, a red alert is shown with an error message. Here the size of the provided sequence is too small for the underlying <code>Provider</code>.</p> <p></p> <p>Tip</p> <p>Quit the page does not stop the request. In other words, you can copy the <code>session-id</code> and come later if your request is too long.</p>"},{"location":"interface/database/table/","title":"Table Tab","text":"<p>The <code>Table</code> tab shows a metadata table corresponding to the hits for the query selected by the Query selector. In other words, it is a sub-table of the complete metadata table displayed in the <code>Index</code> table.</p> <p></p> <p>Note</p> <p>In addition to the metadata, some columns correspond to query coverage metrics:</p> <ul> <li><code>CovXK</code>: proportion of positive k-mers</li> <li><code>CovXB</code>: proportion of bases covered by at least a positive k-mer</li> <li><code>CovYK</code>: mean abundance per k-mer</li> <li><code>CovYB</code>: mean abundance per base</li> </ul> <p>Note that <code>CovYK</code> and <code>CovYB</code> are optional and only present when the underlying <code>Provider</code> supports abundance queries.</p> <p>Each column supports filtering and sorting. Available filters may vary depending on the data type of the column.</p> <p></p> <p>At the top, you can apply filters using SQL <code>WHERE</code> clause syntax, e.g. <code>Temp &gt; 20 and CovXK between 0.5 and 0.8 and ID like '%DCM'</code>. To apply it, use the first button on the right or press <code>Enter</code>. The second button allows to remove the filters.</p> <p></p> <p>Important</p> <p>This table is used to make all the representations, e.g. maps, which means that a filter applied on the table will be reflected on the figures. Note that this works both ways: selecting some points on the map will be reflected on the table, and therefore on the plot too.</p>"},{"location":"interface/database/figure/","title":"Figure","text":"<p>Maps and plots are produced using plotly and kmviz follows the naming of plot properties. This means that you can read the plotly documentation to learn more about each available properties. The documentation links for each map and plot types supported by kmviz are provided in corresponding pages: Map and Plot.</p> <p>Important</p> <p>When making figures, kmviz distinguishes 2 types of action: those that create a new figure (the <code>Trace</code> tab for both maps and plots), e.g. change the plot type, and those that update the figure, e.g. change the title. When enabled auto updates are enabled, all properties corresponding to update actions are automatically re-applied when the figure is modified. For example, if you set a title, then change the plot type, the title remains. See auto update switch.</p> <p>A good way to learn how to use the plotting interface is probably to play with arbitrary data and the kmviz <code>plot mode</code>.</p> <p>Some features are common to plots and maps and are presented below.</p>"},{"location":"interface/database/figure/#download","title":"Download","text":"<p>Figure can be downloaded in various format using the following selector.</p> <p></p> <p>Note</p> <ul> <li><code>JSON</code>: Dump the figure in the <code>plotly JSON</code> format.</li> </ul>"},{"location":"interface/database/figure/#filters","title":"Filters","text":"<p>As for the <code>Table</code> tab, filtering using SQL <code>WHERE</code> clause is supported. See Table for more details.</p> <p></p>"},{"location":"interface/database/figure/#presets","title":"Presets","text":"<p>When running a kmviz instance, one can decide to provide some figure presets to propose default visualizations to users. You can select one preset using the selector presented below.</p> <p></p> <p>See also presets configuration.</p>"},{"location":"plugins/","title":"Plugins","text":"<p>kmviz features are extensible through plugins, as independent python packages. They can be used to add support for new provider types or metadata databases, or to add features to the interface by adding new analysis tabs.</p>"},{"location":"plugins/#setup","title":"Setup","text":"<p>The plugin package name should matches <code>kmviz_*</code> to be automatically detected. Besides, there are no constraints on the package structure. In this example, we follow the classic structure of a poetry-managed project.</p> plugin structure<pre><code>kmviz_example/\n\u251c\u2500\u2500 kmviz_example\n\u2502   \u251c\u2500\u2500 assets\n\u2502   \u2514\u2500\u2500 __init__.py\n\u251c\u2500\u2500 poetry.lock\n\u251c\u2500\u2500 pyproject.toml\n\u2514\u2500\u2500 README.md\n</code></pre> pyproject.toml<pre><code>[tool.poetry]\nname = \"kmviz_example\"\nversion = \"0.1.0\"\ndescription = \"A kmviz plugin example\"\nauthors = [\"John Doe &lt;john.doe@url.com&gt;\"]\nreadme = \"README.md\"\n\n[tool.poetry.dependencies]\npython = \"^3.9\"\nnumpy = \"^1.26.4\"\nkmviz = \"^0.3.1\"\n\n[build-system]\nrequires = [\"poetry-core\"]\nbuild-backend = \"poetry.core.masonry.api\"\n</code></pre>"},{"location":"plugins/#plugin-interface","title":"Plugin interface","text":"<p>The interface to implement is described below. A plugin can implement from one to all of these features.</p> <pre><code>class KmVizPlugin:\n\n    def providers(self) -&gt; List[Tuple[str, Provider]]:\n        \"\"\"\n        :returns: The providers implemented by the plugin, as list of tuples &lt;name,'Provider'&gt;\n        \"\"\"\n        return []\n\n    def databases(self) -&gt; List[Tuple[str, MetaDB]]:\n        \"\"\"\n        :returns: The metadbs implemented by the plugin, as list of tuples &lt;name,'MetaDB'&gt;\n        \"\"\"\n        return []\n\n    def notifiers(self) -&gt; List[Tuple[str, Notifier]]:\n        \"\"\"\n        :returns: The notifiers implemented by the plugin, as list of tuples &lt;name, 'Notifier'&gt;\n        \"\"\"\n\n    def layouts(self) -&gt; List[Tuple[str, Any, str]]:\n        \"\"\"\n        :returns: The layouts implemented by the plugin, as list of tuples &lt;name, dash_component, icon_name&gt;\n        \"\"\"\n        return []\n\n    def external_scripts(self) -&gt; List[Union[dict, str]]:\n        \"\"\"\n        :returns: A list of js scripts to load, see https://dash.plotly.com/external-resources\n        \"\"\"\n        return []\n\n    def external_styles(self) -&gt; List[Union[dict, str]]:\n        \"\"\"\n        :returns: A list of css stylesheets to load, see https://dash.plotly.com/external-resources\n        \"\"\"\n        return []\n\n    def help(self) -&gt; Any:\n        \"\"\"\n        :returns: A Dash Component which will be displayed in the help tab.\n        \"\"\"\n        return None\n\n    def is_instance_plugin(self) -&gt; bool:\n        \"\"\"\n        :returns: True if the plugin is an instance plugin, False otherwise\n        \"\"\"\n        return False\n\n    def instance(self) -&gt; Any:\n        \"\"\"\n        :returns: A Dash Component which will be used as a homepage\n        \"\"\"\n        return None\n\n    def name(self) -&gt; str:\n        \"\"\"\n        :returns: The plugin name\n        \"\"\"\n        return None\n\n    def has_api(self) -&gt; str:\n        \"\"\"\n        :returns: True if the plugin add API routes\n        \"\"\"\n        return False\n\n    def set_api(self, app):\n        \"\"\"\n        Set API routes\n        :returns: None\n        \"\"\"\n        return None\n</code></pre>"},{"location":"plugins/#assets","title":"Assets","text":"<p>A plugin can also provide additional assets. Assets will be automatically available if put at the right location. See instance plugin example.</p>"},{"location":"plugins/#examples","title":"Examples","text":"<ul> <li>Provider</li> <li>MetaDB</li> <li>Layout</li> <li>Instance</li> </ul>"},{"location":"plugins/plugin_instance/","title":"Instance plugin","text":"<p>An <code>instance plugin</code> is a plugin dedicated to a specific instance, e.g. an instance devoted to a sequencing project. It provides a homepage and additional assets to make a customized interface.</p>"},{"location":"plugins/plugin_instance/#implementation","title":"Implementation","text":"<p>Here is an example of an <code>instance plugin</code> implementation. See  kmviz_instance_plugin for a complete example.</p> <pre><code>from typing import Any\nfrom kmviz.core.plugin import KmVizPlugin\n\nfrom dash import dcc\nimport dash_mantine_components as dmc\nfrom dash_iconify import DashIconify\nfrom dash_extensions.enrich import html\n\nfrom typing import List, Tuple, Any\n\nclass InstancePlugin(KmVizPlugin):\n    def is_instance_plugin(self) -&gt; bool:\n        return True\n\n    def name(self) -&gt; str:\n        return \"InstancePlugin\"\n\n    def instance(self) -&gt; html.Div:\n        layout = html.Div([\n            dcc.Markdown(\"\"\"\n            ## Welcome to the kmviz demo instance!\n            Here is an example of what happens when **kmviz** loads an *instance* plugin.\n            In addition to the usual plugin features, an instance plugin can provide\n            a homepage to describe the instance content and provide some help.\n            Here we loaded 'kmviz_instance_plugin'.\n            When a homepage is provided, the **kmviz** dashboard is available\n            at `{url}/dashboard` and the plugin should provide a link to it on the\n            homepage, as the button below.\n            \"\"\"),\n            html.A(\n                dmc.Button(\n                    \"Go to dashboard\",\n                    leftIcon=DashIconify(icon=\"noto:rocket\", width=20),\n                    style={\"position\":\"fixed\", \"top\": \"50%\", \"left\":\"50%\"}\n                ),\n                href=\"/dashboard\"\n            ),\n            dcc.Markdown(\"\"\"\n            *Instance* plugin can also provide additional assets:\n            \"\"\"),\n            html.Img(src=\"assets/_kmviz_instance_plugin_assets/placeholder.png\")\n        ])\n\n        return layout\n\nkmviz_plugin = InstancePlugin()\n</code></pre> <p>Assets will be automatically available if put at the right location, i.e. <code>assets</code> directory in sources. To access a resource, use the following path prefix: <code>assets/_kmviz_{plugin_name}_assets/</code>, ex: <code>assets/_kmviz_instance_plugin_assets/image.png</code>.</p> plugin structure<pre><code>kmviz_instance_plugin\n\u251c\u2500\u2500 kmviz_instance_plugin\n\u2502   \u251c\u2500\u2500 assets             &lt;---\n\u2502   \u2514\u2500\u2500 __init__.py\n\u251c\u2500\u2500 poetry.lock\n\u251c\u2500\u2500 pyproject.toml\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"plugins/plugin_layout/","title":"Layout","text":"<p>If a plugin provides one or more layouts, they will appear as new tabs in the interface. Note that this section is a work in progress. The identifiers and descriptions of the dash components that can be used to interact with kmviz will be described in the near future.</p>"},{"location":"plugins/plugin_layout/#implementation","title":"Implementation","text":"<p>Here is an example of a plugin providing a new layout. See  kmviz_instance_plugin for a complete example.</p> kmviz_layout_plugin/__init__.py<pre><code>from kmviz.core.plugin import KmVizPlugin\nfrom typing import List, Tuple, Any\n\ndef make_layout():\n    res = html.Div([\n        \"New Layout example\"\n    ])\n    return res\n\nclass KmVizLayoutPlugin(KmVizPlugin):\n    def name(self):\n        return \"KmVizLayoutPlugin\"\n\n    def layouts(self) -&gt; List[Tuple[str, Any, str]]:\n        return [(\"NewTab\", make_layout(), \"mdi:new-box\")]\n\nkmviz_plugin = KmVizLayoutPlugin()\n</code></pre>"},{"location":"plugins/plugin_metadb/","title":"MetaDB Plugin","text":""},{"location":"plugins/plugin_metadb/#implementation","title":"Implementation","text":"<p>Here is an example of plugin providing a new <code>MetaDB</code>.</p> MetaDB Interface<pre><code>class MetaDB(ABC):\n    def __init__(self, idx: str, geodata: Dict[str, str] = {}) -&gt; None:\n        self._geodata = geodata\n        self._idx = idx\n\n    @abstractmethod\n    def connect(self):\n        \"\"\"\n        Initialization, like database login, should take place here\n        \"\"\"\n        ...\n\n    @abstractmethod\n    def query(self, keys: List[str]) -&gt; pd.DataFrame:\n        \"\"\"\n        Select a subset of metadata\n\n        :param keys: A sequence of identifiers\n        :returns: A dataframe with the metadata corresponding to the keys\n        \"\"\"\n        ...\n\n    @abstractmethod\n    def df(self) -&gt; pd.DataFrame:\n        \"\"\"\n        Get all metadata\n\n        :returns: A dataframe with all metadata\n        \"\"\"\n        ...\n\n    @abstractmethod\n    def keys(self) -&gt; List[str]:\n        \"\"\"\n        Get all fields\n\n        :returns: The list of all fields\n        \"\"\"\n        ...\n</code></pre> <p>To learn how to implement a new <code>MetaDB</code>, look at the builtin implementations:  metadata.</p> MetaDB Plugin<pre><code>from kmviz.core.plugin import KmVizPlugin, MetaDB\n\nclass MyMetaDB(MetaDB):\n    ...\n\nclass MetaDBPlugin(KmVizPlugin):\n    def name(self):\n        return \"MetaDBPlugin\"\n\n    def databases(self) -&gt; List[Tuple[str, MetaDB]]:\n        return [(\"mymetadb\", MyMetaDB)]\n\nkmviz_plugin = MetaDBPlugin()\n</code></pre>"},{"location":"plugins/plugin_provider/","title":"Provider Plugin","text":"<p> Work In Progress: The documentation about <code>Provider</code> plugins is coming.</p>"},{"location":"plugins/plugin_provider/#implementation","title":"Implementation","text":"<p>Here is an example of plugin providing a new <code>Provider</code>.</p> Provider Interface<pre><code>class Provider(ABC):\n    def __init__(self, name: str):\n        self._name = name\n        self.index_infos: Dict[str, Any] = None\n        self.db: MetaDB = None\n        self.options = {}\n        self._presets = {}\n\n    @abstractmethod\n    def connect(self):\n        \"\"\"\n        Initialization, like database login, should take place here\n        \"\"\"\n        ...\n\n    @abstractmethod\n    def index_list(self) -&gt; List[str]:\n        \"\"\"\n        :returns: The list of sub-index names\n        \"\"\"\n        ...\n\n    @abstractmethod\n    def query(self, query: Query, options: dict, idx: str) -&gt; QueryResponse:\n        \"\"\"\n        :param query: The query\n        :param options: The user-defined options\n        :param idx: A unique id representing the query\n        :returns: T\n        \"\"\"\n        ...\n\n    @abstractmethod\n    def samples(self, index=None) -&gt; Union[Dict[str, list], List[str]]:\n        \"\"\"\n        :param index: The sub-index name\n        :returns: The list of sample indexed by the sub-index, or a dict of list with one key per sub-index\n        \"\"\"\n        ...\n\n    @abstractmethod\n    def kmer_size(self) -&gt; int:\n        \"\"\"\n        :returns: The kmer size for kmer-based index, 0 otherwise\n        \"\"\"\n        ...\n</code></pre> Provider Plugin<pre><code>from kmviz.core.plugin import KmVizPlugin, Provider\n\nclass MyProvider(Provider):\n    ...\n\nclass ProviderPlugin(KmVizPlugin):\n    def name(self):\n        return \"ProviderPlugin\"\n\n    def providers(self) -&gt; List[Tuple[str, Provider]]:\n        return [(\"myprovider\", MyProvider)]\n\nkmviz_plugin = ProviderPlugin()\n</code></pre>"}]}